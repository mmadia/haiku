SubDir HAIKU_TOP src tools bfs_shell ;

SEARCH_SOURCE += [ FDirName $(HAIKU_TOP) src add-ons kernel file_systems bfs ] ;

# prevent inclusion of HaikuBuildCompatibility.h
#DEFINES += HAIKU_BUILD_COMPATIBILITY_H ;

# set some additional defines
{
	local defines =
		#BFS_BIG_ENDIAN_ONLY
		BFS_SHELL
		;

	if $(DEBUG) = 0 {
		# the gcc on BeOS doesn't compile BFS correctly with -O2 or more
		OPTIM = -O1 ;
	}

	defines = [ FDefines $(defines) ] ;
	SubDirCcFlags $(defines) -Wno-multichar ;
	SubDirC++Flags $(defines) -Wno-multichar -fno-rtti ;
}

# platform specific libraries
local fsShellCommandLibs ;
if ! $(HOST_PLATFORM_BEOS_COMPATIBLE) {
	fsShellCommandLibs = $(HOST_NETWORK_LIBS) ;
}

UseHeaders [ FDirName $(HAIKU_TOP) headers build ] : true ;

if ! $(HOST_PLATFORM_BEOS_COMPATIBLE) {
	UseHeaders [ FDirName $(HAIKU_TOP) headers build os ] : true ;
	UseHeaders [ FDirName $(HAIKU_TOP) headers build os support ] : true ;
}

UsePrivateHeaders shared storage ;
UsePrivateHeaders fs_shell ;
UseHeaders [ FDirName $(HAIKU_TOP) src tools fs_shell ] ;

local bfsSource =
	bfs_disk_system.cpp
	BlockAllocator.cpp
	BPlusTree.cpp
	Attribute.cpp
	Debug.cpp
	Index.cpp
	Inode.cpp
	Journal.cpp
	Query.cpp
	Volume.cpp

	kernel_interface.cpp
;

BuildPlatformMergeObject <build>bfs.o : $(bfsSource) ;

BuildPlatformMain <build>bfs_shell
	:
	additional_commands.cpp
	command_checkfs.cpp
	:
	<build>bfs.o
	<build>fs_shell.a $(HOST_LIBSUPC++) $(HOST_LIBSTDC++)
	$(HOST_LIBROOT) $(fsShellCommandLibs)
;

BuildPlatformMain <build>bfs_fuse
	:
	:
	<build>bfs.o
	<build>fuse_module.a
	$(HOST_LIBSUPC++) $(HOST_LIBSTDC++)
	$(HOST_STATIC_LIBROOT) $(fsShellCommandLibs) fuse
;
